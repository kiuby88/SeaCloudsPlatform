tosca_definitions_version: tosca_simple_yaml_1_0_0_wd03

imports:
  - tosca-normative-types:1.0.0.wd06-SNAPSHOT

template_name: web-chat.cluster-policy-compute.mysql-compute
template_version: 1.0.0-SNAPSHOT

description: Chat Application using JBoss

node_types:
  org.apache.brooklyn.entity.webapp.ControlledDynamicWebAppCluster:
    derived_from: tosca.nodes.Root
    description: >
      A simple ControlledDynamicWebAppCluster
    properties:
      http.port:
        type: list
        required: false
        entry_schema:
          type: string
      java.sysprops:
        type: map
        required: false
        entry_schema:
          type: string
      dynamiccluster.memberspec:
        type: org.apache.brooklyn.api.entity.EntitySpec
      wars.root:
        type: string
        required: false

  org.apache.brooklyn.entity.database.mysql.MySqlNode:
    derived_from: tosca.nodes.Root
    description: |
      A MySQL server
    properties:
      creationScriptUrl:
        type: string
        required: false
    requirements:
    - host: tosca.nodes.Compute
      type: tosca.relationships.HostedOn

data_types:
  org.apache.brooklyn.api.entity.EntitySpec:
    properties:
      $brooklyn:entitySpec:
        type: map
        entry_schema:
          type: string

topology_template:
  description: Web Server Sample with Script
  node_templates:
    cluster:
      type: org.apache.brooklyn.entity.webapp.ControlledDynamicWebAppCluster
      properties:
        http.port: "8080+"
        wars.root: "http://search.maven.org/remotecontent?filepath=io/brooklyn/example/brooklyn-example-hello-world-sql-webapp/0.6.0/brooklyn-example-hello-world-sql-webapp-0.6.0.war"
        java.sysprops:
          brooklyn.example.db.url: $brooklyn:formatString("jdbc:%s%s?user=%s\\&password=%s", component("db").attributeWhenReady("datastore.url"), "visitors", "brooklyn", "br00k11n")
        dynamiccluster.memberspec:
          $brooklyn:entitySpec:
            type: org.apache.brooklyn.entity.webapp.jboss.JBoss7Server

    db:
      type: org.apache.brooklyn.entity.database.mysql.MySqlNode
      properties:
        creationScriptUrl: "https://raw.githubusercontent.com/apache/incubator-brooklyn/master/brooklyn-server/launcher/src/test/resources/visitors-creation-script.sql"
      requirements:
      - host: db_compute

    db_compute:
      type: tosca.nodes.Compute
      properties:
        resource_type: compute
        hardwareId: i2.xlarge
        location: aws-ec2
        region: us-west-1
        performance: 90
        availability: 0.9995
        country: United States
        city: SAN JOSE
        cost: 1.001 USD/hour
        disk_size: 800
        num_disks: 1
        num_cpus: 4
        ram: 30.5
        disk_type: ssd

  # if you want to tell brooklyn to assign a location at deploy time, as part of the template, this is the current way.
  # it can also be done with camp, referencing this topology template.
  groups:
    add_brooklyn_autoscaling:
      members: [ cluster]
      policies:
      - brooklyn.location: aws-ec2:us-west-2
      - autoscaling:
          type: org.apache.brooklyn.policy.autoscaling.AutoScalerPolicy
          metric: $brooklyn:sensor("org.apache.brooklyn.entity.webapp.DynamicWebAppCluster", "webapp.reqs.perSec.windowed.perNode")
          metricLowerBound: 10
          metricUpperBound: 100
          minPoolSize: 1
          maxPoolSize: 5

    add_brooklyn_location-db:
      members: [ db_compute ]
      policies:
      - brooklyn.location: aws-ec2:us-west-1